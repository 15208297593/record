所欲测试服的git   账户 git  repogit

goddess(微信端) git@60.205.0.134:/srv/git/goddess.git

goddess-backend(后台) git@60.205.0.134:/srv/git/goddess-backend.git

goddess-pc(网页端) git@60.205.0.134:/srv/git/goddess-pc.git

如果服务器默认ssh端口号不是22 则用  ssh://git@ip:port/srv/git/xxx.git

日常记录
git@60.205.0.134:/srv/git/Mr.Deng.git

linux(centos7) 搭建git服务:
    1.安装git服务
        yum – y install git
        cd srv
        mkdir git
        git init --bare project.git     //在/srv/git 目录下 初始化一个 名为 project.git 的裸仓库
    2.创建一个git账户,git登录上传貌似好像走ssh,所以要走创建一个用户
        useradd git
        passwd  git
    3.把project.git文件夹赋予git用户
        chown -R git:git project.git
    4. 测试git
        git clone git@192.168.153.129:/srv/git/project.git

git@github.com:15208297593/goddess-backend.git

	Git知识:
		git添加当前目录所有文件 -- git add .
		git查看当前状态			-- git status
		将已修改的文件更新到暂存区域中 -- git add 文件名1 文件名2 ..
		撤销已添加到暂存区域中的文件(即回到 "Untracked files" 状态) -- git checkout -文件名
		Git的三种状态:
				在初始化一个项目后,也就是将项目所在目录纳入Git的管理下. 假设目录为 temp,在temp目录下新建一个 README.txt 的文本文件
				此时在git Bash 中切换到 temp目录下,执行:
			#git status	
				状态1	Git会友好的表示 README.txt 为 "Untracked files",并且提示使用 "git add.."命令将文件包含到待提交清单中,按照提示，执行
			#git add README.txt
			#git status
				状态2	此时文件README.txt状态变成了“Changes to be committed”,也就是说README.txt在暂存区域生成了快照,等待被提交.正如Git提示那样, 通过“git rm –cached README.txt”命令，可以将文件状态还原为未暂存状态,即回到“Untracked files”文件状态,现在，README.txt已经可以被提交到git目录中了，但是暂时不提交。打开README.txt，向其中加些内容，再查看其状态\
			#git status
				状态3	除了之前的“Changes to be committed”状态，现在又多了一条“Changes not staged for commit”状态，表明文件已经修改，但是还没有放入暂存区域，也就是没生成快照。如果现在进行commit操作，只是将修改之前的文件快照提交到了git目录，一定记住：只有暂存区域的文件（即：文件状态为“Changes to be committed”）才会被提交。正如提示，通过“git add README.txt”命令将已修改文件更新到暂存区域中，如果想撤销修改，可以使用“git checkout – README.txt”命令。


			Git在未进行commit操作之前，存在三种状态：Untracked files，Changes not staged for commit及Changes to be committed，每种状态之间可以随意进行互相转换。

		常见错误及解决方法:
			git error 'commit' is not possible because you have unmerged files
			先手工编辑好conflict之后再add,再commit,再push

        Git的工作区和暂存区:
            工作区（Working Directory）:     就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
            版本库（Repository）:    工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库.Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

            用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
            用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支.

            另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
            $ git checkout -- test.txt
            git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

            多人协作的工作模式通常是这样：
                1.首先，可以试图用git push origin branch-name推送自己的修改;
                2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并;
                3.如果合并有冲突，则解决冲突，并在本地提交；
                4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
                如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name

            查看远程库信息，使用git remote -v；
            本地新建的分支如果不推送到远程，对其他人就是不可见的；
            从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
            在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
            建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
            从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

        Git如何切换远程仓库地址:
        	一、修改命令
			git remote set-url origin url
			二、先删后加
			git remote rm origin
			git remote add origin git@github.com:sheng/demo.git
			三、修改config文件
			如果你的项目有加入版本控制，那可以到项目根目录下，查看隐藏文件夹， 发现.git文件夹，找到其中的config文件，就可以修改其中的git remote origin地址了。

订阅号 AppID   wx4f46a41d5fcdea79  AppSecret   e771f84cc851e05c75b2b01092af5608

linux mount nfs 的一些坑
/etc/exports 配置文件的内容
/www/images/ 10.171.95.132(rw,no_root_squash,no_all_squash,sync) 10.170.195.201(rw,no_root_squash,no_all_squash,sync)
将10.172.190.99:/www/images/文件夹 挂载到本机/www/images/上    mount -t nfs -o nolock,nfsvers=3,vers=3 -o proto=tcp 10.172.190.99:/www/images/ /www/images/
******如果用客户端执行mount命令出现 collected time out 等问题 首先看看是不是被防火墙拦截了,其次是 服务器和客服端都需要开启 rpcbind 和 nfs服务 ,
还是不行的话 开放这些端口：
                firewall-cmd --permanent --add-port=111/tcp 
                firewall-cmd --permanent --add-port=54302/tcp 
                firewall-cmd --permanent --add-port=20048/tcp 
                firewall-cmd --permanent --add-port=2049/tcp 
                firewall-cmd --permanent --add-port=46666/tcp 
                firewall-cmd --permanent --add-port=42955/tcp 
                firewall-cmd --permanent --add-port=875/tcp
                然后
                firewall-cmd --reload


 cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \ 
        -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock \
        -DDEFAULT_CHARSET=utf8 \
        -DDEFAULT_COLLATION=utf8_general_ci \
        -DWITH_EXTRA_CHARSETS:STRING=utf8,gbk \
        -DWITH_INNOBASE_STORAGE_ENGINE=1 \
        -DWITH_READLINE=1 \
        -DENABLED_LOCAL_INFILE=1 \
        -DMYSQL_DATADIR=/usr/local/mysql/data/ \
        -DMYSQL_TCP_PORT=3306

cmake用于编译源码 需要自行安装并且需要gcc和gcc_c++ 
cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DMYSQL_DATADIR=/usr/local/mysql/data -DMYSQL_TCP_PORT=3306 -DENABLE_DOWNLOADS=1
一般访问linux tomcat 服务,如果确认访问路径是正确的,但还是出现404等错,首先用  tail -f catalina.out 命令查看tomcat日志,如果tomcat没有报错,那就要看是不是linux的防火墙的原因
centos7 默认使用 firewall 防火墙
firewall 防火墙的使用
http://www.111cn.net/sys/CentOS/103509.htm

1、运行、停止、禁用firewalld
启动：# systemctl start  firewalld
查看状态：# systemctl status firewalld 或者 firewall-cmd --state
停止：# systemctl disable firewalld
禁用：# systemctl stop firewalld

查看开放端口
firewall-cmd --list-ports

例如要开放 tomcat默认运行的8080端口
firewall-cmd --zone=public --add-port=8080/tcp --permanent
出现success表明添加成功
要是规则生效需要更新防火墙规则
	更新防火墙规则：# firewall-cmd --reload
					# firewall-cmd --complete-reload
两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务

iptables操作:
    查看状态:
    iptables -L -n
    下面添加对特定端口开放的方法：
    使用iptables开放如下端口
    /sbin/iptables -I INPUT -p tcp --dport 8000 -j ACCEPT
    保存
    /etc/rc.d/init.d/iptables save
    重启服务
    service iptables restart
    查看需要打开的端口是否生效？
    /etc/init.d/iptables status

    法2:
    或直接编辑/etc/sysconfig/iptables
    -A INPUT -p tcp -m tcp --dport 4000 -j ACCEPT
    保存在前面部分
    再重启:
    service iptables restart

tomcat开启远程调试
CATALINA_OPTS="-Xdebug  -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"
JAVA_OPTS="-Xms512m -Xmx1024m"


maven Plugin execution not covered by lifecycle configuration 错误解决办法:
        <build>
                <pluginManagement>
                        <plugins>  
                                <plugin>
                                <!--报错插件 -->
                                </plugin>
                        </plugins>
                </pluginManagement>
        </build>
即在 <build> 和 <plugins>标签之间加上 <pluginManagement>标签
 Eclipse创建Maven web项目jsp表头报错  解决方法
        这种一般都是因为新创建的项目缺少运行环境
        右键web工程－属性或Build Path－Java BuildPath－Libraries－AddLibary－Server runtime

npm设置为淘宝镜像:npm config set registry https://registry.npm.taobao.org 
npm国内镜像:npm config set registry http://registry.cnpmjs.org

如果报类似的错误 bower ECMDERR       Failed to execute "git ls-remote --tags --heads git://github.com/documentcloud/underscore.git", exit code of #128
解决方法:git config --global url."https://".insteadOf git://

查看当前目录下abc.tar文件大小命令 du -h  abc.tar
查看centoscn目录整个文件夹大小命令 du -sh centoscn


if((mc.getRed()==255&&mc.getGreen()==0&&mc.getBlue()==0&&mc.getAlpha() != 0)){
						bfimgR.setRGB(i, j, bfimgP.getRGB(i,j));
					System.out.println("R: "+mc.getRed()+" G: "+mc.getGreen()+" B: "+mc.getBlue()+" A: "+mc.getAlpha());
					}else 
						if((mc.getRed()==0&&mc.getGreen()==255&&mc.getBlue()==0&&mc.getAlpha() != 0)){
						bfimgG.setRGB(i, j, bfimgP.getRGB(i,j));
						System.out.println("R: "+mc.getRed()+" G: "+mc.getGreen()+" B: "+mc.getBlue()+" A: "+mc.getAlpha());
					}else if((mc.getRed()==0&&mc.getGreen()==0&&mc.getBlue()==255&&mc.getAlpha() != 0)){
						bfimgB.setRGB(i, j, bfimgP.getRGB(i,j));
						System.out.println("R: "+mc.getRed()+" G: "+mc.getGreen()+" B: "+mc.getBlue()+" A: "+mc.getAlpha());
					}
http://image.suoyutech.com/sywx/www/images

<form action="${pageContext.request.contextPath}/sub/submit.jsp" method="post"> 
</form>

1.include指令
    include可以在JSP页面转换成Servlet之前，将JSP代码插入其中。它的主要优点是功能强大，所包含的代码可以含有总体上影响主页面的JSP构造，比如属性、方法的定义和文档类型的设定。它的缺点是难于维护只要被包含的页面发生更改，就得更改主页面，这是因为主页面不会自动地查看被包含的页面是否发生更改。
include指令的语法格式如下
    <%@ include file="Relative Url"%>

2.include动作
  jsp:include动作是在主页面被请求时，将次级页面的输出包含进来。尽管被包含的页面的输出中不能含有JSP，但这些页面可以是其他资源所产生的结果。服务器按照正常的方式对指向被包含资源的URL进行解释，因而这个URL可以是Servlet或JSP页面。服务器以通常的方式运行被包含的页面，将产生的输出放到主页面中，这种方式与RequestDispatcher类的include方法一致。它的优点是在被包含的页面发生更改时，无须对主页面做出修改。它的缺点是所包含的是次级页面的输出，而非次级页面的实际代码，所以在被包含的页面中不能使用任何有可能在整体上影响主页面的JSP构造。
  jsp:include动作的完整语法如下
 <jsp:include page="Relative path to resource" flush="true"> 


https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx7acdf8f5643b0234&redirect_uri=http%3a%2f%2ftest.suoyutech.com%2fwxOAuth%2foauthServlet%2fdoGet&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect


eThEPM/!J5ox

Centos查看端口占用情况和开启端口命令   lsof -i tcp:80 (查看80端口占用情况)  netstat -ntlp(列出所有端口) 
根据进程PID查进程所在路径  ps PID  例如执行  lsof -i tcp:80 得到 nginx占用80端口,且pid为 100, 则执行 ps 100  可以查到该进程所在路径


  mysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
    mysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
    mysql> exit;

查看内存情况: free -m
centos7查看当前哪些进程占用内存:
    1. top  atop htop 
    2. 简单的命令，排名前10的内存占用程序，不加 head就是所有程序都列出来
       ps aux|head -1; ps aux | sort -k4nr | head -10
查看当前有哪些用户登录系统:
    1.w 2.who 3.whoami 4.last jason (曾经使用过系统的用户信息)
    
    Linux远程复制文件  scp命令:
        从 远程 复制到 本地，
         scp (-rf 可选参数) 远程用户名 @IP 地址 : 文件名1    本地用户名 @IP 地址 : 文件名2
        
        从本地复制到远程 只要将 从 远程 复制到 本地 的命令 的 后2个参数 调换顺序 即可；

        注意：在需要指定端口时要使用-P(大写的P)，而且要紧跟在scp之后：scp -P 12349 upload_file username@server（正确）        

    https://checkapi.aliyun.com/check/checkdomain?domain=dlfasdfndsl.com&token=check-web-hichina-com%3A3tsdmhszgw9a2ces5mdgsvu125yuzphh

    222.209.232.118
    查询ip地址信息:
    http://www.webservicex.net/geoipservice.asmx?op=GetGeoIPContext
    http://www.webservicex.net/geoipservice.asmx?op=GetGeoIP



    vim 操作:
        查找  按esc后  输入 / 然后输入要查找的 关键词 回车

        删除一个文件内的全部内容 方法1: 按ggdG   方法2: :%d


    Java中去空格的方法:
    	1. String.trim()
			trim()是去掉首尾空格
		2.str.replace(" ", ""); 去掉所有空格，包括首尾、中间
			String str = " hell o ";
			String str2 = str.replaceAll(" ", "");
			System.out.println(str2);
		3.或者replaceAll(" +",""); 去掉所有空格
		4.str = .replaceAll("\s*", "");
			可以替换大部分空白字符， 不限于空格 
			s 可以匹配空格、制表符、换页符等空白字符的其中任意一个
		5.或者下面的代码也可以去掉所有空格，包括首尾、中间
			public String remove(String resource,char ch)
			  {
			    StringBuffer buffer=new StringBuffer();
			    int position=0;
			    char currentChar;

			    while(position<resource.length())
			    {
			      currentChar=resource.charAt(position++);
			      if(currentChar!=ch) buffer.append(currentChar); } return buffer.toString();
			  }
	在命令行执行 javac编译java文件出现 "错误: 编码UTF8的不可映射字符"
		解决方法是添加encoding 参数：javac -encoding gbk xxx.java

    Dos命令
        在dos下打开某个目录的文件夹窗口   start 目录路径  例如:start c:\windows
        在D:\盘建一个空的文本文件a.txt:
        copy nul d:\a.txt
        在这个文件中加一句 hi !
        echo hi ! >> d:\a.txt
        也可一次性创建只含一句话的文本文件：
        echo 这是第一句 > d:\b.txt
        然后再逐句添加：
        echo 这是第二句 >> d:\b.txt

    Python
        在python脚本最上面添加这一行   # -*- coding: utf-8 -*- 让脚本文件以 UTF-8 格式保存

    微信定时发送消息:
        var appElement = document.querySelector('[ng-controller=chatSenderController]');
        var $scope = angular.element(appElement).scope();
        var times = 0;
        var send = setInterval(function(){
            times +=1;
            if(times === 20){
            clearInterval(send);
            }
                var localTime = new Date();
                var localTimeString = localTime.toLocaleTimeString();
                $scope.editAreaCtn = "时间快到9:30了，你该回去了！";
                $scope.sendTextMessage();
            },1000);


        
centos下如何修改FTP帐号或密码
    centos下lamp的环境安装好后，也许会自动为你创建一个FTP用户， 但是用户名和密码可能你并不喜欢。
    如想修改密码或用户名,先找个ssh工具，阿里云官网建议的是用PuTTY，而我也习惯了它。
    修改FTP密码，连接上服务器后，在终端提示符下输入：passwd ftp（ftp为你要修改密码的帐号）
    会提示输入新密码，并再次确认输入新密码。（如出现 “BAD PASSWORD: it is too simplistic/systematic”这样的提示,请不用紧张,这只是说明你的密码过于简单,但你的密码还是有修改成功的）
    然后你就可以用新密码登录FTP了
    修改FTP帐号，连接上服务器后，在终端提示符下输入：usermod -l mewftp ftp
    newftp是新用户名，ftp是旧用户名。

centos下彻底删除用户
    先使用userdel xiaoluo(用户名) 删除账户和组的信息
    再使用【find / -name "*xiaoluo*"】查找所有于该用户的相关文件，在使用rm -rf 删除

删除window服务:
    win+r --> cmd 打开dos窗口
    执行命令: sc delete "mysqla(要删除的服务名)" 

tar命令:
		tar -ztvf file.tar.gz 在不解压文件是查看包内的文件信息;
		tar -zxvf file.tar.gz /www	将压缩包解压到 /www 目录下;
		tar cfz file.tar.gz www		将www 目录压缩为 file.tar.gz 文件,因为 .tar 文件几乎是没压缩过的

Linux下移动一个文件夹下的所有文件到另一个文件夹:
		mv /www/web/* /www/abc

在CentOS安装软件的时候，可能缺少一部分支持库，而报错。这里首先安装系统常用的支持库。那么在安装的时候就会减少很多的错误的出现。

# yum install -y gcc gdb strace gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs patch e2fsprogs-devel krb5-devel libidn libidn-devel openldap-devel nss_ldap openldap-clients openldap-servers libevent-devel libevent uuid-devel uuid mysql-devel

yum install：安装新软件包
yum remove：卸载指定的软件包
yum grouplist：查看系统中已经安装的和可用的软件组
yum groupinstall：安装指定软件组中的软件包
yum groupupdate：更新指定软件组中的软件包
yum groupremove：卸载指定软件组中的软件包
yum clean all：清除缓存中的rpm 头文件和包文件
yum -y search ：搜索相关的软件包
yum info ：显示指定软件包的信息
yum deplist ：查询指定软件包的依赖信息
yum list yum\*：列出所有以 yum 开头的软件包
yum provides：命令路径 可以查处命令由那个软件包安装得到
yum 命令可以使用 -y 参数回答 yes

datetimepicker:
        //上班时间选择
            $('#timepickerOn').timepicker({
                minuteStep : 1,
                secondStep : 1,
                showSeconds : true,
                showMeridian : false,
                disableFocus : true,
                icons : {
                    up : 'fa fa-chevron-up',
                    down : 'fa fa-chevron-down'
                }
            }).on('focus', function() {
                $('#timepickerOn').timepicker('showWidget');
            }).next().on(ace.click_event, function() {
                $(this).prev().focus();
            });

            //下班时间选择
            $('#timepickerOff').timepicker({
                minuteStep : 1,
                secondStep : 1,
                showSeconds : true,
                showMeridian : false,
                disableFocus : true,
                icons : {
                    up : 'fa fa-chevron-up',
                    down : 'fa fa-chevron-down'
                }
            }).on('focus', function() {
                $('#timepickerOff').timepicker('showWidget');
            }).next().on(ace.click_event, function() {
                $(this).prev().focus();
            });

JS取消标签元素上原有的click事件改用自定义的方法:
    jQuery中，针对标签属性的操作都是使用attr()方法来实现的，比如：$(“a”).attr(“onclick”)可获得a标签的onclick属性,对应的：
    删除onclick属性：$(“a”).removeAttr(“onclick”);
    设置onclick属性：$(“a”).attr(“onclick”,”test();”);

运行Jenkins报  ERROR: Maven JVM terminated unexpectedly with exit code 137.
    解决方案: 调整 Maven-OPTS 参数

    We were running Jenkins as a daemon and found adjusting the "-Xmx" startup param solved the problem -- "/usr/bin/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -XX:MaxPermSize=512m -Xmx8192m -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --ajp13Port=-1 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20"
    
    http://blog.csdn.net/a351945755/article/details/19192479

centos7下启动httpd服务报 "unregistered authentication agent for httpd..."错误:
    关闭SELinux即可解决:  setenforce 0

google chrome离线安装包:
    https://www.google.com/chrome/browser/thankyou.html?standalone=1&platform=win&installdataindex=defaultbrowser
    standalone=1 ：确认下载离线安装包
    platform=win ：适用平台为windows
    installdataindex=defaultbrowser  ：安装后设chrome为当前默认浏览器
    extra=stablechannel  ：指定版本为稳定版（候选列表同上）
ubantu16.04 apt install 安装apache2,phpinfo页面空白:
    更改php.ini中的  short_open_tag 值为 on 然后重启 apache 服务

ubuntu下apache服务器开启url重写:
    1.sudo gedit /etc/apache2/apache2.conf  打开apache配置文件
    <Directory /var/www/>  实际目录根据网站根目录而定
        Options Indexes FollowSymLinks
        AllowOverride None  改为All
        Require all granted
    </Directory>

    2.ln -s /etc/apache2/mods-avaliable/rewrite.load /etc/apache2/mods-enable/rewrite.load
    建立url重写模块的软连接，apache会自动加载（前提是apache2.conf中配置了加载mods-enable中的模块，默认是加载）

    3.在网站的根目录下建立.htaccess文件，内容为：
    <IfModule mod_rewrite.c> 
      Options +FollowSymlinks 
      RewriteEngine On 
      RewriteCond %{REQUEST_FILENAME} !-d 
      RewriteCond %{REQUEST_FILENAME} !-f 
      RewriteRule ^(.*)$ index.PHP/$1 [QSA,PT,L] 
    </IfModule>

    4.重启apache服务。。必须是root才能重启
    http://blog.csdn.net/u010521546/article/details/44942277
    http://www.linuxidc.com/Linux/2017-01/139105.htm

mysql追加表注释:
    alter table card comment ='注释内容';

bug管理软件:
    delbug      http://www.delbug.cn/
    bugdone     https://www.bugdone.cn/
    蒲公英      bug.pgyer.com
    禅道项目管理软件    http://www.zentao.net/download.html
    JIRA        https://www.atlassian.com/software/jira
    Mantis问题管理系统    http://www.mantis.org.cn/
    bugly       https://bugly.qq.com/v2/
    bugclose    https://www.bugclose.com/
    bugtags     https://work.bugtags.com/login.html
    bugzilla    https://www.bugzilla.org/
开源项目管理软件:
    OpenProj    GanttProject    DotProject  TaskJuggler     PHProjekt      ConsultComm  ProjectPier     OpenGoo     Collabtive  Redmine
    http://blog.csdn.net/dj0379/article/details/52135913

php的dirname(__FILE__)和dirname(dirname(__FILE__))
    dirname(dirname(__FILE__)); 
    假设__FILE__为 /home/web/config/config.PHP  
    上面的方法输出为 /home/web  
    dirname(dirname(__FILE__));得到的是文件上一层目录名
    dirname(__FILE__);得到的是文件所在层目录名

Linux查看配置信息:
    http://blog.csdn.net/dream_broken/article/details/52883883
    1.系统
        1.1版本   uname -a 能确认是64位还是32位，其它的信息不多
                  more /etc/*release 可以看到更多信息
        1.2核数   cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
                  cat /proc/cpuinfo | grep physical | uniq -c
                  cat /proc/cpuinfo可以看到更为详细的信息
        1.3运行模式 getconf LONG_BIT  CPU运行在多少位模式下
                    cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l 是否支持64位   (结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)
        1.4计算机名  hostname
        1.5.查看环境变量  env
        1.6系统允许多长时间了/负载数    uptime
                                        直接查看平均负载情况 cat /proc/loadavg    (例:0.00 0.01 0.05 4/524 7152 除了前3个数字表示平均进程数量外，后面的1个分数，分母表示系统进程总数，分子表示正在运行的进程数；最后一个数字表示最近运行的进程ID)
    2.资源
        2.1内存   cat /proc/meminfo内存的详细信息   MemTotal总内存，MemFree可用内存,free -m(-m，单位是m，如果是-g，单位是g）查看可用内存
               空闲内存total-used=free+buff/cache   我们通过free命令查看机器空闲内存时，会发现free的值很小。这主要是因为，在linux中有这么一种思想，内存不用白不用，因此它尽可能的cache和buffer一些数据，以方便下次使用。但实际上这些内存也是可以立刻拿来使用的。
    3.磁盘和分区
        3.1查看各分区使用情况    df -h
        3.2查看指定目录的大小    fdisk -l
        3.4查看所有交换分区      swapon -s
    4.网络
        4.1查看所有网络接口的属性  ifconfig
        4.2 带宽  ethtool 网卡名
        4.3查看路由表    route -n
        4.4查看所有监听端口    netstat -lntp
        4.5查看所有已经建立的连接     netstat -antp
        4.6 某端口使用情况     lsof -i:端口号  或者  netstat -apn|grep 端口号

    5.进程
    5.1查看所有进程   ps -ef,使用ps -ef|gerp tomcat过滤
                      ps -aux可以看到进程占用CPU,内存情况
    5.2实时显示进程状态     top

    6.用户
        6.1查看活动用户  w
        6.2查看指定用户的信息 id <用户名>
        6.3查看用户登录日志 last
        6.4查看系统所有用户 cut -d: -f1 /etc/passwd

Eclipse快捷键:
    1、编辑页面编辑页之间切换的快捷键
        Ctrl + Shift + F6 （轻松实现了切换） alt+left/right  ctrl+page up/page down
    2、java窗口和deBug调试窗口切换快捷键
        Ctrl + Shift + F8
    3、查看快捷键列表的快捷键
        Ctrl + Shift + L
数据导入报错：Got a packet bigger than‘max_allowed_packet’bytes的问题
    1.临时修改：mysql>set global max_allowed_packet=524288000;修改 #512M
 
    2.修改my.cnf，需重启mysql.     
      在 [MySQLd] 部分添加一句（如果存在，调整其值就可以）：
      max_allowed_packet=10M

Eclipse生成JavaDoc 出现 错误: 编码GBK的不可映射字符 的解决方法:
        在Configure Javadoc arguments 界面的 VM options 选项输入框中加上:
        -encoding UTF-8 -charset UTF-8

单例模式和静态类的区别:
    1.单例模式可以继承和被继承,方法可以被override,而静态方法不可以.
    2.静态方法中产生的对象在执行后被释放,进而被GC清理,不会一直存在内存中.
    3.静态类会在第一次运行是初始化,单例模式可以有其他的选择,即可以延迟加载.
    4.基于2,3条,由于单例对象往往存在于DAO层(例如sessionFactory),如果反复的初始化和释放,则会占用很多资源,而使用单例模式将其常驻于内存可以更加节约资源.
    5.静态方法有更高的访问效率.
    6.单例模式很容易被测试.

单例模式的实现:
    通过提供一个静态的对象instance，利用private权限的构造方法和getInstance()方法来给予访问者一个单例。
    之所以叫懒汉模式,主要是因为此种方法可以非常明显的lazy loading.
    1.懒汉模式(非线程安全)

        public class SingletonDemo{
            private static SingletonDemo instance;
            private SingletonDemo(){

            }
            public static SingletonDemo getInstance(){
                if(instance == null){
                    instance = new SingletonDemo();
                }
                return instance;
            }
        }

    2.懒汉模式(线程安全)

        public class SingletonDemo{
            private static SingletonDemo instance;
            private SingletonDemo(){

            }

            public static synchronized SingletonDemo getInstance(){
                if(instance == null){
                    instance = new SingletonDemo();
                }
                return instance;
            }
        }

    3.饿汉模式

        public class SingletonDemo{
            private static SingletonDemo instance = new SingletonDemo();
            private SingletonDemo(){

            }

            public static SingletonDemo getInstance(){
                return instance;
            }
        }
        直接运行这个类的时候进行一次loading,之后直接访问,没有起到lazy loading的效果,这种方法只比静态类多了一个内存常驻而已.

    4.静态类内部加载

        public class SingletonDemo{
            private static class SingletonDemo{
                private static SingletonDemo instance = new SingletonDemo();
            }

            private SingletonDemo(){
                System.out.println("Singleton has loaded");
            }

            public static SingletonDemo getInstance(){
                return SingletonDemo.instance;
            }
        }
        使用内部类的好处是,静态内部类不会在单例加载时加载,而是在调用getInstance()方法时才进行加载,达到了类似懒汉模式的效果,而这种方法又是线程安全的

    5.枚举方法
        enum SingletonDemo{
            INSTANCE;
            public void otherMethods(){
                System.out.println("Something");
            }
        }

        Effective Java作者Josh Bloch 提倡的方式，在我看来简直是来自神的写法。解决了以下三个问题：

        (1)自由序列化。
        (2)保证只有一个实例。
        (3)线程安全。

        如果我们想调用它的方法时，仅需要以下操作：

        public class Hello {
            public static void main(String[] args){
                SingletonDemo.INSTANCE.otherMethods();
            }
        }
        这种充满美感的代码真的已经终结了其他一切实现方法了。

    6.双重校验锁法
        public class SingletonDemo{
            private volatile static SingletonDemo instance;
            private SingletonDemo(){
                System.out.println("Singleton has loaded");
            }
            public static singletonDemo getInstance{
                if(instance == null){
                    synchronized (SingletonDemo.class){
                        if(instance == nulll){
                            instance = new SingletonDemo();
                        }
                    }
                }
                return instance;
            }
        }

        双重校验锁法会有怎样的情景：

        STEP 1. 线程A访问getInstance()方法，因为单例还没有实例化，所以进入了锁定块。

        STEP 2. 线程B访问getInstance()方法，因为单例还没有实例化，得以访问接下来代码块，而接下来代码块已经被线程1锁定。

        STEP 3. 线程A进入下一判断，因为单例还没有实例化，所以进行单例实例化，成功实例化后退出代码块，解除锁定。

        STEP 4. 线程B进入接下来代码块，锁定线程，进入下一判断，因为已经实例化，退出代码块，解除锁定。

        STEP 5. 线程A获取到了单例实例并返回，线程B没有获取到单例并返回Null。

        理论上双重校验锁法是线程安全的，并且，这种方法实现了lazyloading。



不可变对象是指一个对象的状态在对象被创建之后就不再变化。不可变对象对于缓存是非常好的选择，因为你不需要担心它的值会被更改。

        创建一个不可变类：

        将类声明为final，所以它不能被继承；
        将所有的成员声明为私有的，这样就不允许直接访问这些成员；
        对变量不要提供setter方法；
        将所有可变的成员声明为final，这样只能对它们赋值一次；
        通过构造器初始化所有成员，进行深拷贝（deep copy）；
        在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝；

        public final class Immutable {  
            private final int id;  
            private final String name;  
            private final HashMap map;  
            
            public int getId() {  
                return id;  
            }  
            
            public String getName() {  
                return name;  
            }  
            
            /** 
             * 可变对象的访问方法 
             */  
            public HashMap getMap() {  
                return (HashMap) testMap.clone();  
            }  
            
            /** 
             * 实现深拷贝的构造器*/  
            public Immutable(int i, String n, HashMap hm){this.id=i;  
                this.name=n;  
                HashMap tempMap=new HashMap();  
                String key;  
                Iterator it = hm.keySet().iterator();  
                while(it.hasNext()){  
                    key=it.next();  
                    tempMap.put(key, hm.get(key));  
                }  
                this.map = tempMap;  
            }  
           
        }


        不变模式有两种形式：弱不变模式和强不变模式。

        弱不变模式，指类实例的状态是不可改变，但是这个类的子类的实例具有可能会变化的状态，要实现弱不变模式，一个类必须满足下面条件：

        对象没有任何会修改对象状态的方法 ，这样一来当对象的构造函数将对象的状态初始化之后，对象的状态便不再改变；

        属性都是私有的，以防客户端对象直接修改内部状态；

        这个对象所引用的其他对象如果是可变的话，必须设法限制外界对这些可变对象的访问，以防止外界修改这些对象，尽量在不可变对象内部初始化这些被引用的对象，而不要在客户端初始化再传入到不可变对象内部来，如果某个可变对象必须在客户端初始化，然后再传入到不变对象里的话，就应当考虑在不可变对象初始化的时候，将这个可变对象进行拷贝。

        弱不变模式的缺点是，一个弱不变对象的子对象可能是可变的，这个可变的子对象可能可以修改父对象的状态，从而可能允许外界修改父对象的状态。

        强不变模式：一个类的实例不会改变，同时它的子类的实例也具有不可变化的状态。一个类必须首先满足弱不变模式所要求的所有条件，并且还有满足下面条件之一：

        类所有的方法都应当是final，这样这个类的子类不能够重写此类的方法；
        此类本身就是final的，那么这个类就不可能会有子类，从而也就不可能有被子类修改的问题；

        不变和只读的区别：当一个变量是只读时，变量的值不能直接改变，但是可以在其他变量发生改变的时候改变；比如生日是不变属性，而年龄是只读的，年龄会随着时间发生变化，生日则不会变化。（用final声明的变量是只读的）

        不可变对象的好处：

        不可变对象更容易构造，测试与使用；
        真正不可变对象都是线程安全的；
        不可变对象的使用没有副作用（没有保护性拷贝）；
        对象变化的问题得到了避免；
        不可变对象的失败都是原子性的；
        不可变对象更容易缓存，且可以避免null引用；
        不可变对象可以避免时间上的耦合；
        String，StringBuffer，StringBuilder，都是final类，不允许被继承，在本质上都是字符数组，不同的是，String的长度是不可变的而后两者长度可变，在进行连接操作时，String每次返回一个新的String实例，而StringBuffer和StringBuilder的append方法直接返回this，所以当进行大量的字符串连接操作时，不推荐使用String，因为它会产生大量的中间String对象。

        StringBuffer和StringBuilder的一个区别是，StringBuffer在append方法前增加了一个synchronized修饰符，以起到同步的作用，为此也降低了执行效率；若要在toString方法中使用循环，使用StringBuilder。

        整数二进制表示只需要知道一点就行了，那就是：有符号数的最高位的权值需要乘以 -1，比如以下是233的32位二进制表示：
        233 = 00000000 00000000 00000000 11101001
        该数的最高位为0，所以其权值为0，乘以 -1 依然是0，所以整个数是正数
        将其转换成为type后为：
        11101001，那么该数的值就是：
        -1 * 1 * 2^7 + 1 * 2^6 + 1 * 2^5 + 0 * 2^4 + 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = -128 + 64 + 32 + 8 + 1 = -23

        理解了这点后对于理解整数的二进制表示很有帮助，例如不管这个数用多少位来表示，我们都可以知道以下特点：
        1. 所有位都为1时该值是 -1，因为2^0 + 2^1 + ... + 2^(n-1) = 2^n - 1。计算-1 + 1 = 0，因为其二进制表示的最高位溢出了，留下的有效位全为0，所以就自然得到了0；
        2. 仅最高位为1，其余位都为0时表示最小的负数；
        3. 仅最高位为0，其余位都为1时表示最大的正数。

        MySQL:GCfund!@!