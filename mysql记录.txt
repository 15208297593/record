mysql触发器
	|基本语法
	|---CREATE TRIGGER <触发器名称>  --触发器必须有名字，最多64个字符，可能后面会附有分隔符.它和MySQL中其他对象的命名方式基本相象.
		{ BEFORE | AFTER }  --触发器有执行的时间设置：可以设置为事件发生前或后。
		{ INSERT | UPDATE | DELETE }  --同样也能设定触发的事件：它们可以在执行insert、update或delete的过程中触发。
		ON <表名称>  --触发器是属于某一个表的:当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活. 我们不能给同一张表的同一个事件安排两个触发器。
		FOR EACH ROW  --触发器的执行间隔：FOR EACH ROW子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。
		<触发器SQL语句>  --触发器包含所要触发的SQL语句：这里的语句可以是任何合法的语句， 包括复合语句，但是这里的语句受的限制和函数的一样。

	example1:
		先创建两张表
			DROP TABLE IF EXISTS tab1;
			CREATE TABLE tab1(
			    tab1_id varchar(11)
			);

			DROP TABLE IF EXISTS tab2;
			CREATE TABLE tab2(
			    tab2_id varchar(11)
			);

		创建触发器:t_afterinsert_on_tab1	作用：增加tab1表记录后自动将记录增加到tab2表中
			DROP TRIGGER IF EXISTS t_afterinsert_on_tab1;
			CREATE TRIGGER t_afterinsert_on_tab1 
			AFTER INSERT ON tab1
			FOR EACH ROW
			BEGIN
			     insert into tab2(tab2_id) values(new.tab1_id);
			END;	

		测试一下
			INSERT INTO tab1(tab1_id) values('0001');
		再去两张表中验证结果

	example2:

		创建触发器:t_afterdelete_on_tab1	作用：删除tab1表记录后自动将tab2表中对应的记录删去

			DROP TRIGGER IF EXISTS t_afterdelete_on_tab1;
			CREATE TRIGGER t_afterdelete_on_tab1
			AFTER DELETE ON tab1
			FOR EACH ROW
			BEGIN
			      delete from tab2 where tab2_id=old.tab1_id;
			END;

		测试一下
			DELETE FROM tab1 WHERE tab1_id='0001';
		验证结果

	其中 sql语句中的 new.tab1_id 和 old.tab1_id 中的 new 和 old:

			使用别名old和new，能够引用与触发程序相关的表中的列。old.col_name在更新或删除它之前，引用已有行中的1列。new.col_name在更新它之后引用将要插入的新行的1列或已有行的1
			列，所以要引用update前的列就用old，要引用update后的列就用new

MySQL事件
	1.事件简介
		事件（event）是MySQL在相应的时刻调用的过程式数据库对象。一个事件可调用一次，也可周期性的启动，它由一个特定的线程来管理的，也就是所谓的“事件调度器”。
	    事件和触发器类似，都是在某些事情发生的时候启动。当数据库上启动一条语句的时候，触发器就启动了，而事件是根据调度事件来启动的。由于他们彼此相似，所以事件也称为临时性触发器。
	    事件取代了原先只能由操作系统的计划任务来执行的工作，而且MySQL的事件调度器可以精确到每秒钟执行一个任务，而操作系统的计划任务（如：Linux下的CRON或Windows下的任务计划）只能精确到每分钟执行一次。

    2.事件的优缺点
    	2.1 优点
    	一些对数据定时性操作不再依赖外部程序，而直接使用数据库本身提供的功能。
	    可以实现每秒钟执行一个任务，这在一些对实时性要求较高的环境下就非常实用了。
	    2.2 缺点
	    定时触发，不可以调用。

	3.创建事件
		3.1事件语法
			CREATE  
		    [DEFINER = { user | CURRENT_USER }]  
		    EVENT  
		    [IF NOT EXISTS]  
		    event_name  
		    ON SCHEDULE schedule  
		    [ON COMPLETION [NOT] PRESERVE]  
		    [ENABLE | DISABLE | DISABLE ON SLAVE]  
		    [COMMENT 'comment']  
		    DO event_body;  
		  
			schedule:  
		    AT timestamp [+ INTERVAL interval] ...  
		  	| EVERY interval  
		    [STARTS timestamp [+ INTERVAL interval] ...]  
		    [ENDS timestamp [+ INTERVAL interval] ...]  
		  
			interval:  
		    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |  
		              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |  
		              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND} 

			名词解释：

			    event_name ：创建的event名字（唯一确定的）。
			    ON SCHEDULE：计划任务。
			    schedule: 决定event的执行时间和频率（注意时间一定要是将来的时间，过去的时间会出错），有两种形式 AT和EVERY。
			    [ON COMPLETION [NOT] PRESERVE]： 可选项，默认是ON COMPLETION NOT PRESERVE 即计划任务执行完毕后自动drop该事件；ON COMPLETION  PRESERVE则不会drop掉。
			    [COMMENT 'comment'] ：可选项，comment 用来描述event；相当注释，最大长度64个字节。
			    [ENABLE | DISABLE] ：设定event的状态，默认ENABLE：表示系统尝试执行这个事件， DISABLE：关闭该事情，可以用alter修改
			    DO event_body: 需要执行的sql语句（可以是复合语句）。CREATE EVENT在存储过程中使用时合法的。

		3.2 开启关闭事件调度器
        	3.2.1 MySQL事件调度器event_scheduler负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用， 要创建事件，必须打开调度器.
        		mysql> show variables like '%event_scheduler%';  
				+-----------------+-------+  
				| Variable_name   | Value |  
				+-----------------+-------+  
				| event_scheduler | OFF   |  
				+-----------------+-------+ 
			3.2.2 开启事件调度器
        		通过命令行
        		可通过如下任何一个命令行
        			SET GLOBAL event_scheduler = ON;  
					SET @@global.event_scheduler = ON;  
					SET GLOBAL event_scheduler = 1;  
					SET @@global.event_scheduler = 1; 

				通过配置文件 my.cnf
				 	event_scheduler = 1 #或者ON
				 查看调度器线程
				  	mysql> show processlist;  
					+----+-----------------+-----------+------+---------+------+------------------------+------------------+  
					| Id | User            | Host      | db   | Command | Time | State                  | Info             |  
					+----+-----------------+-----------+------+---------+------+------------------------+------------------+  
					|  2 | root            | localhost | NULL | Query   |    0 | NULL                   | show processlist |  
					|  3 | event_scheduler | localhost | NULL | Daemon  |    6 | Waiting on empty queue | NULL             |  
					+----+-----------------+-----------+------+---------+------+------------------------+------
			  3.2.3 关闭事件调度器
	       		通过命令行
        		可通过如下任何一个命令行
        			SET GLOBAL event_scheduler = OFF;  
					SET @@global.event_scheduler = OFF;  
					SET GLOBAL event_scheduler = 0;  
					SET @@global.event_scheduler = 0;
				
				通过配置文件my.cnf
        		在[mysqld]下增加
        			event_scheduler = 0 #或者OFF，DISABLED
        		 查看调度器线程
        		 	mysql> show processlist;  
					+----+------+-----------+------+---------+------+-------+------------------+  
					| Id | User | Host      | db   | Command | Time | State | Info             |  
					+----+------+-----------+------+---------+------+-------+------------------+  
					|  2 | root | localhost | NULL | Query   |    0 | NULL  | show processlist |  
					+----+------+-----------+------+---------+------+-------+------------------+ 
			3.3 例如：创建一个表记录每次事件调度的名字和事件戳
				 3.3.1 创建测试表
				 	mysql> drop table if exists events_list;  
					mysql> create table events_list(event_name varchar(20) not null, event_started timestamp not null);
				 3.3.2 创建事件1（立即启动事件）
				 	create event event_now   
					on schedule   
					at now()   
					do insert into events_list values('event_now', now()); 

				   查看事件执行结果
				   	mysql> select * from events_list;  
					+------------+---------------------+  
					| event_name | event_started       |  
					+------------+---------------------+  
					| event_now  | 2014-07-01 04:06:40 |  
					+------------+---------------------+
				  3.3.3 创建事件2（每分钟启动事件）
				  	create event test.event_minute   
					on schedule   
					every  1 minute    
					do insert into events_list values('event_now', now());  

					查看事件执行结果
						mysql> select * from events_list;  
						+------------+---------------------+  
						| event_name | event_started       |  
						+------------+---------------------+  
						| event_now  | 2014-07-01 04:26:53 |  
						| event_now  | 2014-07-01 04:27:53 |  
						| event_now  | 2014-07-01 04:28:53 |  
						+------------+---------------------+ 
			 3.4 注意：
				    默认创建事件存储在当前库中，也可显示指定事件创建在哪个库中
				    通过show events只能查看当前库中创建的事件
				    事件执行完即释放，如立即执行事件，执行完后，事件便自动删除，多次调用事件或等待执行事件可以查看到。
				    如果两个事件需要在同一时刻调用，mysql会确定调用他们的顺序，如果要指定顺序，需要确保一个事件至少在另一个事件1秒后执行
				    对于递归调度的事件，结束日期不能在开始日期之前。
				    select可以包含在一个事件中，然而他的结果消失了，就好像没执行过。 	
	4.查看事件
		查看当前所在库的事件
			mysql> show events; 
		查看所有事件
			mysql> select * from mysql.event;

	5 修改事件
    	一条alter event语句可以修改事件的定义和属性。我们可以让一个事件成为停止的或者再次让它活动，也可以修改一个事件的名字或者整个调度。然而当一个使用 ON COMPLETION NOT PRESERVE 属性定义的事件最后一次执行后，事件直接就不存在了，不能修改.
    	5.1 语法如下:
    		ALTER  
    			[DEFINER = { user | CURRENT_USER }]  
			    EVENT event_name  
			    [ON SCHEDULE schedule]  
			    [ON COMPLETION [NOT] PRESERVE]  
			    [RENAME TO new_event_name]  
			    [ENABLE | DISABLE | DISABLE ON SLAVE]  
			    [COMMENT 'comment']  
			    [DO event_body]
		5.2 例如
			修改上面例子3.3.3 每分钟启动事件为每30秒启动	
				alter event test.event_minute  
				on schedule   
				every  30 second    
				do insert into events_list values('event_now', now()); 
			修改上面例子3.3.3 事件名字为event_second
				alter event test.event_minute   
				rename to test.event_second; 
			 修改上面例子3.3.3 事件为不活动和再次活动
			 	alter event test.event_second disable;  
				alter event test.event_second enable;  
	  6 删除事件
	  	如果一个事件不再需要，我们可以使用一条drop event 语句删除它。使用这条语句我们不需要等到最后一次事件调用。
	  	6.1 基本语法
	  		DROP EVENT [IF EXISTS] event_name 
	  	6.2 例如
	  		drop event if exists event_second;
